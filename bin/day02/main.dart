// --- Day 2: Bathroom Security ---
// http://adventofcode.com/2016/day/2

List<String> inputs = [
  "UULLULLUULLLURDLDUURRDRRLDURDULLRURDUDULLLUULURURLRDRRRRULDRUULLLLUUDURDULD"
      "RRDRUDLRRLDLUDLDDRURURUURRRDDDLLRUDURDULUULLRRULLRULDUDRDRLDLURURUDDUDLURUD"
      "UDURLURURRURLUDDRURRDLUURLLRURRDUDLULULUDULDLLRRRDLRDLDUDRDDDRRUURRRRRUURRD"
      "RRDLURDRRURDLLUULULLRURDLDDDRRLLRRUURULURUUDDLRRUDDRURUUDLRLRDLRURRRDULLDLR"
      "UDDUULRDULURUURDULUDLLRRLDDLRDLRUDRLDDRLRRRDURDULLRRRDRRLUURURDRRDRRLDLUDUR"
      "URLDUURDRUDRDDRLDRRLDLURURULLUURUDUUDLRLL",
  "LLLULLULDDULRLLURLLLRUUDDLRUULRLULLDLLRRDRLRLRLLDRUUURULDRDDLUDLLDUDULLLRLU"
      "LLLRULDRDRUDLLRLRLLUDULRRRLDRUULDDULLDULULLUDUDLDRDURDLDLLDUDRRRDLUURRUURUL"
      "LURLDURLRRLLDDUUULDRLUUDUDLURLULUDURRDRLLDDDDDRRULLRLDULULDDRUURRDLUDDDUDUR"
      "DDRDRULULLLLUURDURUUUULUDLRURRULRDDRURURLLRLUUDUUURDLLDDLUDRLLLUDLLLLULRLUR"
      "DRRRDUUDLLDLDDDURRDDRURUURDDRURRLDDDURDLLUURUUULRLUURRUDRLLDLURDUDRLULDLRLU"
      "LULUDDLRDUDRUDLUULUULDURDRRRRLRULLUDRDDRDLDUDRDRRLDLLLLUDDLRULDLLDDUULDDRRU"
      "LRRUURUDRDURLLLDDUUDRUUDLULLDR",
  "UDUUULLDDDDLUDLDULRLRDLULLDDRULDURRLURRUDLRRUDURRDUDRRRUULRLLRLUDLDRRDUURDD"
      "RDRDUUUDUDLDLLRRLUURLUUUDDDUURLULURRLURRRDRDURURUDRLRUURUDRUDDDRDRDLDRDURDL"
      "DRRDUUDLLURLDDURRRLULDRDRLLRLLLRURLDURDRLDRUURRLDLDRLDDDRLDLRLDURURLLLLDDRD"
      "UDLRULULLRDDLLUDRDRRLUUULDRLDURURDUDURLLDRRDUULDUUDLLDDRUUULRRULDDUDRDRLRUL"
      "UUDUURULLDLLURLRRLDDDLLDRRDDRLDDLURRUDURULUDLLLDUDDLDLDLRUDUDRDUDDLDDLDULUR"
      "DDUDRRUUURLDUURULLRLULUURLLLLDUUDURUUDUULULDRULRLRDULDLLURDLRUUUDDURLLLLDUD"
      "RLUUDUDRRURURRDRDDRULDLRLURDLLRRDRUUUURLDRURDUUDLDURUDDLRDDDDURRLRLUDRRDDUR"
      "DDRLDDLLRR",
  "ULDRUDURUDULLUDUDURLDLLRRULRRULRUDLULLLDRULLDURUULDDURDUUDLRDRUDUDDLDRDLUUL"
      "RRDLRUULULUUUDUUDDRDRLLULLRRDLRRLUDRLULLUUUUURRDURLLRURRULLLRLURRULRDUURRLD"
      "DRRDRLULDDRRDRLULLRDLRRURUDURULRLUDRUDLUDDDUDUDDUDLLRDLLDRURULUDRLRRULRDDDD"
      "DRLDLRRLUUDLUURRDURRDLDLDUDRLULLULRLDRDUDLRULLULLRLDDRURLLLRLDDDLLLRURDDDLL"
      "UDLDLRLUULLLRULDRRDUDLRRDDULRLLDUURLLLLLDRULDRLLLUURDURRULURLDDLRRUDULUURRL"
      "ULRDRDDLULULRRURLDLRRRUDURURDURDULURULLRLDD",
  "DURLRRRDRULDLULUDULUURURRLULUDLURURDDURULLRRUUDLRURLDLRUDULDLLRRULLLLRRLRUU"
      "LDLDLLRDUDLLRLULRLLUUULULRDLDLRRURLUDDRRLUUDDRRUDDRRURLRRULLDDULLLURRULUDLR"
      "RRURRULRLLLRULLRRURDRLURULLDULRLLLULLRLRLLLDRRRRDDDDDDULUUDUDULRURDRUDRLUUL"
      "URDURLURRDRRRRDRRLLLLUDLRRDURURLLULUDDLRLRLRRUURLLURLDUULLRRDURRULRULURLLLR"
      "LUURRULLLURDDDRURDUDDULLRULUUUDDRURUUDUURURRDRURDUDRLLRRULURUDLDURLDLRRRRLL"
      "UURRLULDDDUUUURUULDLDRLDUDULDRRULDRDULURRUURDU",
];

main(List<String> args) {
  List<List> a = [
    [" ", " ", " ", " ", " "],
    [" ", "1", "2", "3", " "],
    [" ", "4", "5", "6", " "],
    [" ", "7", "8", "9", " "],
    [" ", " ", " ", " ", " "],
  ];

  print("Solution 1: ${solve(a, 2, 2)}");

  List<List> b = [
    [" ", " ", " ", " ", " ", " ", " "],
    [" ", " ", " ", "1", " ", " ", " "],
    [" ", " ", "2", "3", "4", " ", " "],
    [" ", "5", "6", "7", "8", "9", " "],
    [" ", " ", "A", "B", "C", " ", " "],
    [" ", " ", " ", "D", " ", " ", " "],
    [" ", " ", " ", " ", " ", " ", " "],
  ];

  print("Solution 2: ${solve(b, 1, 3)}");
}

String solve(List<List> keypad, int x, int y) {
  StringBuffer sb = new StringBuffer();

  for (String input in inputs) {
    for (int i = 0; i < input.length; i++) {
      switch (input[i]) {
        case "U": // UP
          x = (keypad[x-1][y] != " ") ? x-1 : x;
          break;
        case "D": // DOWN
          x = (keypad[x+1][y] != " ") ? x+1 : x;
          break;
        case "L": // LEFT
          y = (keypad[x][y-1] != " ") ? y-1 : y;
          break;
        case "R": // RIGHT
          y = (keypad[x][y+1] != " ") ? y+1 : y;
          break;
      }
    }

    sb.write("${keypad[x][y]}");
  }

  return sb.toString();
}
